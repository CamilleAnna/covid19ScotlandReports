knitr::opts_chunk$set(echo = FALSE)
setwd('/Users/s1687811/Documents/GitHub/covid19/AG_briefing/')
today<- Sys.Date()
# SOURCED SCRIPTS & ENVIRONMENTS
# 1) load packages + used functions
source('/Users/s1687811/Documents/GitHub/covid19/script/sourced_functions_doublingTime_reports.R')
# 2) output of analysis script --> all content to run plot commands are in there --> May be used to re-work figures in a classic R script
load(paste0('/Users/s1687811/Documents/GitHub/covid19/AG_briefing/output/AG_briefing_analysis_output_', today, '.RData'))
# GENERAL FIGURES PARAMETERS
xlabels.font = 2
ylabels.font = 2
xlabels.cex = 1.1
ylabels.cex = 1.1
ylabels.line = 2.2
xlabels.line = 2.2
xticks.cex = 1.1
yticks.cex = 1.1
xticks.font = 2
yticks.font = 2
Td.report
Td.death.obs
Td.report[Td.report$variable == 'Scotland death','Td.obs']
paste('  ', Td.report[Td.report$variable == 'Scotland death','Td.obs'], ' (',Td.report[Td.report$variable == 'Scotland death','ci.low'], '-', Td.report[Td.report$variable == 'Scotland death','ci.upp'], ')')
Td.reportMINUS7
setwd('/Users/s1687811/Documents/GitHub/covid19/AG_briefing/')
today<- Sys.Date() - 1
its = 1000
set.seed(as.numeric(today))
source('/Users/s1687811/Documents/GitHub/covid19/script/sourced_functions_doublingTime_reports.R')
time_window<- 7
t2.define<- today - 1
t1.define<- t2.define - time_window
d.uk<- # UK data, formatting variable names to fit in rest of the script
read_excel(paste0('./data/', today, '/UK_data_', today, '.xlsx'), sheet = 1) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
pops.shb<- read_excel('./input_files/popsizes_grouped.xlsx', sheet = 1) %>% as.data.frame() # Scottish health board population data
pops.uk<- read_excel('./input_files/popsizes_grouped.xlsx', sheet = 2) %>% as.data.frame() # UK population data
d.uk.deaths<-
read_excel(paste0('./data/', today, '/UK_Regions_Deaths', today, '.xlsx'), sheet = 2) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
d.uk.deaths<-
read_excel(paste0('./data/', today, '/UK_Regions_Deaths_', today, '.xlsx'), sheet = 2) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
setwd('/Users/s1687811/Documents/GitHub/covid19/AG_briefing/')
d.uk.deaths<-
read_excel(paste0('./data/', today, '/UK_Regions_Deaths_', today, '.xlsx'), sheet = 2) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
getwd()
d.uk.deaths<-
read_excel(paste0('data/', today, '/UK_Regions_Deaths_', today, '.xlsx'), sheet = 2) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
read_excel("data/2020-04-08/UK_Regions_Deaths_2020_04_08.xlsx")
paste0('data/', today, '/UK_Regions_Deaths_', today, '.xlsx')
read_excel("./data/2020-04-08/UK_Regions_Deaths_2020_04_08.xlsx", sheet = 2)
d.uk.deaths<-
read_excel(paste0('data/', today, '/UK_Regions_Deaths_', today, '.xlsx'), sheet = 2) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
View(d.uk.deaths)
plot(London ~ date, data = d.uk.deaths, type = 'l')
lines(Scotland ~ date, data = d.uk.deaths, lwd = 2, col = "dodgerblue")
plot(London ~ date, data = d.uk.deaths, type = 'l', lwd = 2, col = "red")
lines(Scotland ~ date, data = d.uk.deaths, lwd = 2, col = "dodgerblue")
lines(rUKxL ~ date, data = d.uk.deaths, lwd = 2, col = "black")
plot(rUKxL ~ date, data = d.uk.deaths, type = 'l', lwd = 2, col = "Black")
lines(Scotland ~ date, data = d.uk.deaths, lwd = 2, col = "dodgerblue")
lines(London ~ date, data = d.uk.deaths, lwd = 2, col = "red")
d.uk.deaths
d.uk.deaths.10k<-
read_excel(paste0('data/', today, '/UK_Regions_Deaths_', today, '.xlsx'), sheet = 3) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
plot(log10(rUKxL) ~ date, data = d.uk.deaths, type = 'l', lwd = 2, col = "Black")
lines(log10(Scotland) ~ date, data = d.uk.deaths, lwd = 2, col = "dodgerblue")
lines(log10(London) ~ date, data = d.uk.deaths, lwd = 2, col = "red")
par(mfrow = c(1,2))
plot(rUKxL ~ date, data = d.uk.deaths, type = 'l', lwd = 2, col = "Black")
lines(Scotland ~ date, data = d.uk.deaths, lwd = 2, col = "dodgerblue")
lines(London ~ date, data = d.uk.deaths, lwd = 2, col = "red")
yseq = seq(0, 5000, yaxti.f1)
# Set up figure parameters
yaxti.f1 = 1000
yseq = seq(0, 5000, yaxti.f1)
xseq = seq.Date(from = min(d.uk.deaths$date), to = max(d.uk.deaths$date), length.out = 5)
# Draw plot, axes labels, axes ticks, background grids
plot(rUKxL ~ date, data = d.uk.deaths, type = 'l', main = '  ',
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n', lwd = 2,
xlim = range(xseq),
ylim = range(yseq))
mtext('Cumulative number of deaths', side = 2, font = ylabels.font, line = ylabels.line, cex = ylabels.cex)
# GENERAL FIGURES PARAMETERS
xlabels.font = 2
ylabels.font = 2
xlabels.cex = 1.1
ylabels.cex = 1.1
ylabels.line = 2.2
xlabels.line = 2.2
xticks.cex = 1.1
yticks.cex = 1.1
xticks.font = 2
yticks.font = 2
par(mfrow = c(1,2))
# Set up figure parameters
yaxti.f1 = 1000
yseq = seq(0, 5000, yaxti.f1)
xseq = seq.Date(from = min(d.uk.deaths$date), to = max(d.uk.deaths$date), length.out = 5)
# Draw plot, axes labels, axes ticks, background grids
plot(rUKxL ~ date, data = d.uk.deaths, type = 'l', main = '  ',
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n', lwd = 2,
xlim = range(xseq),
ylim = range(yseq))
mtext('Cumulative number of deaths', side = 2, font = ylabels.font, line = ylabels.line, cex = ylabels.cex)
mtext('Date (dd/mm)', side = 1, font = xlabels.font, line = xlabels.line, cex = xlabels.cex)
axis(2, at = yseq, labels = yseq, font = yticks.font, cex.axis = yticks.cex)
axis(1, at = xseq, labels = format(xseq, "%d/%m"), font = xticks.font, cex.axis = xticks.cex)
abline(h = yseq, v = xseq, col = 'lightgrey', lty = 'dotted')
# Add lines
lines(rUKxL ~ date, data = d.uk.deaths, lwd = 3, col = 'black')
lines(London ~ date, data = d.uk.deaths, lwd = 3, col = 'red')
lines(Scotland ~ date, data = d.uk.deaths, lwd = 3, col = 'dodgerblue')
mtext('A', side = 3, font = 2, line = 0.2, adj = 0, cex = 1.5)
legend("topleft",
legend = c('Region/Country:', ' rUKxL', ' London', ' Scotland'),
ncol = 1,
title.adj = 0.4,
y.intersp = 1,
text.font = c(2,1,1,1),
text.col = c('black', 'black', 'red', 'dodgerblue'),
text.width = 9,
inset=c(-0.05,-0.005))
box()
box()
plot(log10(rUKxL) ~ date, data = d.uk.deaths, type = 'l', lwd = 2, col = "Black")
lines(log10(Scotland) ~ date, data = d.uk.deaths, lwd = 2, col = "dodgerblue")
lines(log10(London) ~ date, data = d.uk.deaths, lwd = 2, col = "red")
seq(0.5, 4, yaxti.f1b)
# Set up figure parameters
yaxti.f1b = 0.5
seq(0.5, 4, yaxti.f1b)
d.uk.deaths.10k<-
read_excel(paste0('data/', today, '/UK_Regions_Deaths_', today, '.xlsx'), sheet = 3) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
plot(log10(rUKxL) ~ date, data = d.uk.deaths.10k, type = 'l', lwd = 2, col = "Black")
lines(log10(Scotland) ~ date, data = d.uk.deaths.10k, lwd = 2, col = "dodgerblue")
lines(log10(London) ~ date, data = d.uk.deaths.10k, lwd = 2, col = "red")
plot(log10(London) ~ date, data = d.uk.deaths.10k, type = 'l', lwd = 2, col = "red")
lines(log10(Scotland) ~ date, data = d.uk.deaths.10k, lwd = 2, col = "dodgerblue")
lines(log10(rUKxL) ~ date, data = d.uk.deaths.10k, lwd = 2, col = "dodgerblue")
lines(log10(rUKxL) ~ date, data = d.uk.deaths.10k, lwd = 2, col = "black")
# Set up figure parameters
yaxti.f1b = 1
yseq = seq(-2, 1, yaxti.f1b)
xseq = seq.Date(from = min(df.fig2A$date), to = max(df.fig2A$date), length.out = 5)
xseq = seq.Date(from = min(d.uk.deaths.10k$date), to = max(d.uk.deaths.10k$date), length.out = 5)
# Draw plot, axes labels, axes ticks, background grids
plot(London ~ date, data = df.fig2B, type = 'l', main = '  ',
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n', lwd = 2,
xlim = range(xseq),
ylim = range(yseq))
# Draw plot, axes labels, axes ticks, background grids
plot(London ~ date, data = d.uk.deaths.10k, type = 'l', main = '  ',
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n', lwd = 2,
xlim = range(xseq),
ylim = range(yseq))
# Draw plot, axes labels, axes ticks, background grids
plot(log10(London) ~ date, data = d.uk.deaths.10k, type = 'l', main = '  ',
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n', lwd = 2,
xlim = range(xseq),
ylim = range(yseq))
axis(2, at = yseq, labels = 10^(yseq), font = yticks.font, cex.axis = yticks.cex)
axis(1, at = xseq, labels = format(xseq, "%d/%m"), font = xticks.font, cex.axis = xticks.cex)
abline(h = yseq, v = xseq, col = 'lightgrey', lty = 'dotted')
# Add shaded polygon on area over which Dt are calculated
polygon(x = c(t1, t2, t2, t1),
y = c(head(yseq, 1), head(yseq, 1), tail(yseq, 1), tail(yseq, 1)),
border = NA,
col = adjustcolor('lightgrey', alpha = .4))
# Add lines
lines(log10(rUKxL) ~ date, data = d.uk.deaths.10k, lwd = 2, col = 'black')
lines(log10(London) ~ date, data = d.uk.deaths.10k, lwd = 2, col = 'red')
lines(log10(Scotland) ~ date, data = d.uk.deaths.10k, lwd = 2, col = 'dodgerblue')
mtext('B', side = 3, font = 2, line = 0.2, adj = 0, cex = 1.5)
d.uk.deaths<-
read_excel(paste0('data/', today, '/UK_Regions_Deaths_', today, '.xlsx'), sheet = 2) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
plot(rUKxL ~ date, data = d.uk.deaths, type = 'l', lwd = 2, col = "Black")
lines(Scotland ~ date, data = d.uk.deaths, lwd = 2, col = "dodgerblue")
lines(London ~ date, data = d.uk.deaths, lwd = 2, col = "red")
d.uk.deaths.10k<-
read_excel(paste0('data/', today, '/UK_Regions_Deaths_', today, '.xlsx'), sheet = 3) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
plot(log10(London) ~ date, data = d.uk.deaths.10k, type = 'l', lwd = 2, col = "red")
lines(log10(Scotland) ~ date, data = d.uk.deaths.10k, lwd = 2, col = "dodgerblue")
lines(log10(rUKxL) ~ date, data = d.uk.deaths.10k, lwd = 2, col = "black")
par(mfrow = c(1,2))
# FIG 1A ----
# Set up figure parameters
yaxti.f1 = 1000
yseq = seq(0, 5000, yaxti.f1)
xseq = seq.Date(from = min(d.uk.deaths$date), to = max(d.uk.deaths$date), length.out = 5)
# Draw plot, axes labels, axes ticks, background grids
plot(rUKxL ~ date, data = d.uk.deaths, type = 'l', main = '  ',
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n', lwd = 2,
xlim = range(xseq),
ylim = range(yseq))
mtext('Cumulative number of deaths', side = 2, font = ylabels.font, line = ylabels.line, cex = ylabels.cex)
mtext('Date (dd/mm)', side = 1, font = xlabels.font, line = xlabels.line, cex = xlabels.cex)
axis(2, at = yseq, labels = yseq, font = yticks.font, cex.axis = yticks.cex)
axis(1, at = xseq, labels = format(xseq, "%d/%m"), font = xticks.font, cex.axis = xticks.cex)
abline(h = yseq, v = xseq, col = 'lightgrey', lty = 'dotted')
# Add lines
lines(rUKxL ~ date, data = d.uk.deaths, lwd = 3, col = 'black')
lines(London ~ date, data = d.uk.deaths, lwd = 3, col = 'red')
lines(Scotland ~ date, data = d.uk.deaths, lwd = 3, col = 'dodgerblue')
mtext('A', side = 3, font = 2, line = 0.2, adj = 0, cex = 1.5)
legend("topleft",
legend = c('Region/Country:', ' rUKxL', ' London', ' Scotland'),
ncol = 1,
title.adj = 0.4,
y.intersp = 1,
text.font = c(2,1,1,1),
text.col = c('black', 'black', 'red', 'dodgerblue'),
text.width = 9,
inset=c(-0.05,-0.005))
box()
box()
# FIG 1B ----
# FIG 2B ----
# Set up figure parameters
yaxti.f1b = 1
yseq = seq(-2, 1, yaxti.f1b)
xseq = seq.Date(from = min(d.uk.deaths.10k$date), to = max(d.uk.deaths.10k$date), length.out = 5)
# Draw plot, axes labels, axes ticks, background grids
plot(log10(London) ~ date, data = d.uk.deaths.10k, type = 'l', main = '  ',
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n', lwd = 2,
xlim = range(xseq),
ylim = range(yseq))
mtext('Cumulative cases per 10k pop.', side = 2, font = ylabels.font, line = ylabels.line, cex = ylabels.cex)
mtext('Date (dd/mm)', side = 1, font = xlabels.font, line = xlabels.line, cex = xlabels.cex)
axis(2, at = yseq, labels = 10^(yseq), font = yticks.font, cex.axis = yticks.cex)
axis(1, at = xseq, labels = format(xseq, "%d/%m"), font = xticks.font, cex.axis = xticks.cex)
abline(h = yseq, v = xseq, col = 'lightgrey', lty = 'dotted')
# Add shaded polygon on area over which Dt are calculated
polygon(x = c(t1, t2, t2, t1),
y = c(head(yseq, 1), head(yseq, 1), tail(yseq, 1), tail(yseq, 1)),
border = NA,
col = adjustcolor('lightgrey', alpha = .4))
# Add lines
lines(log10(rUKxL) ~ date, data = d.uk.deaths.10k, lwd = 2, col = 'black')
lines(log10(London) ~ date, data = d.uk.deaths.10k, lwd = 2, col = 'red')
lines(log10(Scotland) ~ date, data = d.uk.deaths.10k, lwd = 2, col = 'dodgerblue')
mtext('B', side = 3, font = 2, line = 0.2, adj = 0, cex = 1.5)
makeInsetText<- function(variable.inTd.report, Td.report, TextVarName){
td = Td.report[Td.report$variable == variable.inTd.report, c('Td.obs', 'ci.low', 'ci.upp')]
insetText.td<- paste0(TextVarName, ': ', td$Td.obs, ' (', td$ci.low , '-', td$ci.upp,')')
return(insetText.td)
}
Td.report$variable<- as.character(Td.report$variable)
# legend.text<- c('Doubling time (95%CI):',
#                 makeInsetText('Rest of UK cases', Td.report, ' rUKxL'),
#                 makeInsetText('London cases', Td.report, ' London'),
#                 makeInsetText('Scotland cases', Td.report, ' Scotland'))
# legend("topleft",
#        legend = legend.text,
#        ncol = 1,
#        title.adj = 0.4,
#        y.intersp = 1,
#        text.font = c(2,1,1,1),
#        cex = 0.9,
#        text.width = 11,
#        text.col = c('black', 'black', 'red', 'dodgerblue'),
#        inset=c(-0.04,-0.005))
box()
box()
setwd('/Users/s1687811/Documents/GitHub/covid19/AG_briefing/')
today<- Sys.Date() - 1
source('/Users/s1687811/Documents/GitHub/covid19/script/sourced_functions_doublingTime_reports.R')
# 2) output of analysis script --> all content to run plot commands are in there --> May be used to re-work figures in a classic R script
load(paste0('/Users/s1687811/Documents/GitHub/covid19/AG_briefing/output/AG_briefing_analysis_output_', today, '.RData'))
xlabels.font = 2
ylabels.font = 2
xlabels.cex = 1.1
ylabels.cex = 1.1
ylabels.line = 2.2
xlabels.line = 2.2
xticks.cex = 1.1
yticks.cex = 1.1
xticks.font = 2
yticks.font = 2
d.uk.deaths<-
read_excel(paste0('./data/', today, '/UK_Regions_Deaths_', today, '.xlsx'), sheet = 2) %>%
mutate(date = as.Date(date)) %>%
as.data.frame()
unlink('script/AG_briefing_report_forTODAY_cache', recursive = TRUE)
